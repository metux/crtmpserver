#!/bin/sh
### BEGIN INIT INFO
# Provides:          crtmpserver
# Required-Start:    $network $local_fs $remote_fs
# Required-Stop:     $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: C++ RTMP/RTSP streaming server
# Description:       High performance RTMP/RTSP/MPEG-TS streaming server
### END INIT INFO

# Author: Andriy Beregovenko <jet@jet.kiev.ua>

PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="C++ RTMP Server"
NAME=crtmpserver
DAEMON=/usr/sbin/crtmpserver
DAEMON_ARGS=" --daemon "
DAEMON_CONF="/etc/crtmpserver/crtmpserver.lua"
DAEMON_USER="root"
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME
ENABLED="no"

[ -r /etc/default/$NAME ] && . /etc/default/$NAME

[ -x $DAEMON ] || exit 0
[ -r $DAEMON_CONF ] || exit 0

[ $ENABLED = "yes" ] || exit 0

. /lib/init/vars.sh
. /lib/lsb/init-functions

DAEMON_UID=$(getent passwd ${DAEMON_USER} | cut -d":" -f3)
if [ -z "${DAEMON_UID}" ]; then
	echo "Error: User ${DAEMON_USER} does not exist."
	exit 1
fi

UID_ARG=" --uid=${DAEMON_UID} "

do_start()
{
	start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON --test > /dev/null \
		|| return 1
	start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON -- \
		$DAEMON_ARGS $UID_ARG $DAEMON_CONF \
		|| return 2
}

do_stop()
{
	start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE --name $NAME
	RETVAL="$?"
	[ "$RETVAL" = 2 ] && return 2

	start-stop-daemon --stop --quiet --oknodo --retry=INT/30/KILL/5 --exec $DAEMON
	[ "$?" = 2 ] && return 2

	rm -f $PIDFILE
	return "$RETVAL"
}

case "$1" in
  start)
    log_daemon_msg "Starting $DESC " "$NAME"
    do_start
    case "$?" in
		0|1) log_end_msg 0 ;;
		2) log_end_msg 1 ;;
	esac
  ;;
  stop)
	log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) log_end_msg 0 ;;
		2) log_end_msg 1 ;;
	esac
	;;
  status)
       status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
       ;;
  restart)
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
	  	# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  force-reload)
	restart
	;;
  *)
	echo "Usage: $SCRIPTNAME {start|stop|status|restart}" >&2
	exit 3
	;;
esac

:
